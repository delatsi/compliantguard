name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        type: boolean
        default: false
      confirm_production:
        description: 'Type "PRODUCTION" to confirm deployment'
        required: true
        default: ''

env:
  AWS_REGION: us-east-1
  SAM_CONFIG_ENV: prod
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  validate-deployment-request:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Validate confirmation
      id: check
      run: |
        if [[ "${{ github.event.inputs.confirm_production }}" != "PRODUCTION" ]]; then
          echo "‚ùå Production confirmation required. Please type 'PRODUCTION' in the confirm_production field."
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"
        echo "should_deploy=true" >> $GITHUB_OUTPUT
    
    - name: Determine version
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"
    
    - name: Log deployment request
      run: |
        echo "üöÄ Production deployment requested"
        echo "Version: ${{ steps.version.outputs.version }}"
        echo "Requested by: ${{ github.actor }}"
        echo "Skip tests: ${{ github.event.inputs.skip_tests }}"
        echo "Timestamp: $(date -u)"

  pre-deployment-checks:
    needs: validate-deployment-request
    runs-on: ubuntu-latest
    if: needs.validate-deployment-request.outputs.should_deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Validate production readiness
      run: |
        echo "üîç Validating production readiness..."
        
        # Check for required files
        required_files=(
          "backend/template.yaml"
          "backend/samconfig.toml"
          "frontend/package.json"
          "docs/deployment-setup.md"
        )
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present"
    
    - name: Check for production branch
      run: |
        if [[ "${{ github.ref_name }}" != "main" ]]; then
          echo "‚ö†Ô∏è  Warning: Deploying from branch '${{ github.ref_name }}' instead of 'main'"
        else
          echo "‚úÖ Deploying from main branch"
        fi

  test-production-build:
    needs: [validate-deployment-request, pre-deployment-checks]
    runs-on: ubuntu-latest
    if: needs.validate-deployment-request.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run comprehensive backend tests
      run: |
        cd backend
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=. --cov-report=term-missing --cov-fail-under=70
        else
          echo "No tests directory found, skipping tests"
        fi
    
    - name: Build backend for production
      run: |
        cd backend
        sam build --config-env ${{ env.SAM_CONFIG_ENV }}
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
    
    - name: Build frontend for production
      run: |
        cd frontend
        echo "VITE_API_URL=https://api.themisguard.com" > .env.production
        echo "VITE_ENVIRONMENT=production" >> .env.production
        npm run build
    
    - name: Audit dependencies
      run: |
        cd frontend
        npm audit --audit-level=high
        cd ../backend
        pip-audit || echo "‚ö†Ô∏è pip-audit not available, skipping"

  security-scan-production:
    needs: validate-deployment-request
    runs-on: ubuntu-latest
    if: needs.validate-deployment-request.outputs.should_deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run comprehensive security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
    
    - name: Check for secrets in production
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --fail

  backup-production:
    needs: [validate-deployment-request, pre-deployment-checks]
    runs-on: ubuntu-latest
    if: always() && needs.validate-deployment-request.outputs.should_deploy == 'true'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create pre-deployment backup
      run: |
        echo "üîÑ Creating pre-deployment backup..."
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BACKUP_BUCKET="themisguard-backups-prod"
        
        # Create backup identifier
        echo "backup_timestamp=$TIMESTAMP" >> $GITHUB_ENV
        
        # Backup DynamoDB tables
        aws dynamodb list-tables \
          --query 'TableNames[?starts_with(@, `themisguard`)]' \
          --output text | while read TABLE; do
          if [[ -n "$TABLE" ]]; then
            echo "Creating backup for table: $TABLE"
            aws dynamodb create-backup \
              --table-name $TABLE \
              --backup-name "${TABLE}-pre-deployment-${TIMESTAMP}" || echo "Failed to backup $TABLE"
          fi
        done
        
        echo "‚úÖ Backup completed: $TIMESTAMP"

  deploy-backend-production:
    needs: [backup-production, security-scan-production, test-production-build]
    runs-on: ubuntu-latest
    environment: production
    if: always() && needs.validate-deployment-request.outputs.should_deploy == 'true' && !failure()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Build SAM application
      run: |
        cd backend
        sam build --config-env ${{ env.SAM_CONFIG_ENV }}
    
    - name: Deploy to production
      run: |
        cd backend
        sam deploy \
          --config-env ${{ env.SAM_CONFIG_ENV }} \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --parameter-overrides \
            Environment=prod \
            Version=${{ needs.validate-deployment-request.outputs.version }} \
            Branch=${{ github.ref_name }}
    
    - name: Verify deployment
      run: |
        cd backend
        echo "üîç Verifying API deployment..."
        sleep 60  # Allow time for deployment to stabilize
        
        # Get API URL
        API_URL=$(sam list stack-outputs --config-env ${{ env.SAM_CONFIG_ENV }} --output json | jq -r '.[] | select(.OutputKey=="ApiUrl") | .OutputValue' || echo "")
        
        if [[ -n "$API_URL" ]]; then
          echo "API URL: $API_URL"
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f "$API_URL/health"; then
              echo "‚úÖ API health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i failed, retrying..."
              sleep 30
            fi
          done
        else
          echo "‚ö†Ô∏è Could not determine API URL"
        fi

  deploy-frontend-production:
    needs: [deploy-backend-production]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get production API URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name themisguard-api-prod \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [[ -z "$API_URL" ]]; then
          API_URL="https://api.themisguard.com"
          echo "‚ö†Ô∏è Using default API URL: $API_URL"
        fi
        
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend for production
      run: |
        cd frontend
        echo "VITE_API_URL=${{ steps.get-api-url.outputs.api_url }}" > .env.production
        echo "VITE_ENVIRONMENT=production" >> .env.production
        echo "VITE_VERSION=${{ needs.validate-deployment-request.outputs.version }}" >> .env.production
        npm run build
    
    - name: Deploy to S3 with backup
      run: |
        cd frontend
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BACKUP_BUCKET="themisguard-backups-prod"
        FRONTEND_BUCKET="themisguard-frontend-prod"
        
        # Check if buckets exist
        if aws s3 ls "s3://$FRONTEND_BUCKET" > /dev/null 2>&1; then
          echo "üîÑ Backing up current frontend..."
          aws s3 sync "s3://$FRONTEND_BUCKET" "s3://$BACKUP_BUCKET/frontend/$TIMESTAMP/" || echo "Backup failed, continuing..."
        fi
        
        # Deploy new version
        echo "üöÄ Deploying new frontend..."
        aws s3 sync dist/ "s3://$FRONTEND_BUCKET" --delete
        
        # Update cache headers for index.html
        aws s3 cp "s3://$FRONTEND_BUCKET/index.html" "s3://$FRONTEND_BUCKET/index.html" \
          --metadata-directive REPLACE \
          --cache-control "no-cache, no-store, must-revalidate" || echo "Cache headers update failed"

  production-smoke-tests:
    needs: [deploy-frontend-production]
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get production URLs
      id: get-urls
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name themisguard-api-prod \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text 2>/dev/null || echo "https://api.themisguard.com")
        
        FRONTEND_URL="https://app.themisguard.com"
        
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
    
    - name: Run production smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        
        # API health check
        echo "Testing API health..."
        for i in {1..3}; do
          if curl -f "${{ steps.get-urls.outputs.api_url }}/health"; then
            echo "‚úÖ API health check passed"
            break
          else
            echo "‚è≥ API health check attempt $i failed, retrying..."
            sleep 30
          fi
        done
        
        # Frontend availability
        echo "Testing frontend availability..."
        if curl -f "${{ steps.get-urls.outputs.frontend_url }}"; then
          echo "‚úÖ Frontend availability check passed"
        else
          echo "‚ö†Ô∏è Frontend availability check failed"
        fi
        
        echo "üéâ Smoke tests completed!"

  post-deployment:
    needs: [production-smoke-tests, validate-deployment-request]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
      if: success()
    
    - name: Update deployment tracking
      run: |
        if [[ "${{ needs.production-smoke-tests.result }}" == "success" ]]; then
          echo "‚úÖ Production deployment successful"
          
          # Tag successful deployment
          aws ssm put-parameter \
            --name "/themisguard/prod/last-successful-deployment" \
            --value "${{ needs.validate-deployment-request.outputs.version }}" \
            --type "String" \
            --overwrite || echo "Failed to update deployment tracking"
          
          # Create deployment record
          aws ssm put-parameter \
            --name "/themisguard/prod/deployments/${{ needs.validate-deployment-request.outputs.version }}" \
            --value "{\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"commit\":\"${{ github.sha }}\",\"actor\":\"${{ github.actor }}\"}" \
            --type "String" || echo "Failed to create deployment record"
        else
          echo "‚ùå Production deployment failed"
        fi
      if: always()
    
    - name: Create deployment summary
      run: |
        echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.validate-deployment-request.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ needs.production-smoke-tests.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Skip Tests:** ${{ github.event.inputs.skip_tests }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.production-smoke-tests.result }}" == "success" ]]; then
          echo "### üéâ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üåê Production URL:** https://app.themisguard.com" >> $GITHUB_STEP_SUMMARY
          echo "**üìä Monitoring:** https://console.aws.amazon.com/cloudwatch/" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ö†Ô∏è Deployment failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs and consider rolling back if necessary." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Action Runner Minutes Used:** Approximately 15-20 minutes" >> $GITHUB_STEP_SUMMARY