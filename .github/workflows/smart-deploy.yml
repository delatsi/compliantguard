name: Smart Deployment (Idempotent)

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment of both backend and frontend'
        type: boolean
        default: false
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

permissions:
  contents: read
  security-events: write
  actions: read

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Detect what changed to determine deployment strategy
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      infrastructure_changed: ${{ steps.changes.outputs.infrastructure }}
      environment: ${{ steps.env.outputs.environment }}
      deployment_strategy: ${{ steps.strategy.outputs.strategy }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need at least 2 commits to compare

    - name: Detect changed files
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
            - 'template.yaml'
            - 'samconfig.toml'
            - 'requirements.txt'
          frontend:
            - 'frontend/**'
            - 'frontend-template.yaml'
          infrastructure:
            - 'template.yaml'
            - 'frontend-template.yaml'
            - 'samconfig.toml'
            - '.github/workflows/**'
          docs:
            - 'docs/**'
            - '*.md'

    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENVIRONMENT="staging"
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          ENVIRONMENT="dev"
        else
          ENVIRONMENT="dev"  # PR builds
        fi
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "🌍 Target environment: $ENVIRONMENT"

    - name: Determine deployment strategy
      id: strategy
      run: |
        BACKEND_CHANGED="${{ steps.changes.outputs.backend }}"
        FRONTEND_CHANGED="${{ steps.changes.outputs.frontend }}"
        FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"
        
        if [[ "$FORCE_DEPLOY" == "true" ]]; then
          STRATEGY="full"
          echo "🚀 Force deployment requested - deploying both backend and frontend"
        elif [[ "$BACKEND_CHANGED" == "true" && "$FRONTEND_CHANGED" == "true" ]]; then
          STRATEGY="full"
          echo "🔄 Both backend and frontend changed - full deployment"
        elif [[ "$BACKEND_CHANGED" == "true" ]]; then
          STRATEGY="backend-only"
          echo "⚡ Only backend changed - backend deployment only"
        elif [[ "$FRONTEND_CHANGED" == "true" ]]; then
          STRATEGY="frontend-only"
          echo "🎨 Only frontend changed - frontend deployment only"
        else
          STRATEGY="none"
          echo "📝 No deployment needed - only docs or other files changed"
        fi
        
        echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
        echo "Backend changed: $BACKEND_CHANGED"
        echo "Frontend changed: $FRONTEND_CHANGED"

  # Run tests only for changed components
  test-backend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend_changed == 'true' || needs.detect-changes.outputs.deployment_strategy == 'full'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio ruff

    - name: Run linting and formatting checks
      run: |
        cd backend
        echo "🚀 Running ruff check (linting)..."
        ruff check . --output-format=github
        echo "🎨 Running ruff format (formatting)..."
        ruff format . --check

    - name: Run tests with coverage
      run: |
        cd backend
        if [ -d "tests" ]; then
          echo "🧪 Running backend tests..."
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
        else
          echo "⚠️ No tests directory found, creating placeholder"
          mkdir -p tests
          echo "# Placeholder test file" > tests/__init__.py
          touch coverage.xml
        fi

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      if: env.CODECOV_TOKEN != ''
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.frontend_changed == 'true' || needs.detect-changes.outputs.deployment_strategy == 'full'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        echo "🔍 Running frontend linting..."
        npm run lint

    - name: Run tests
      run: |
        cd frontend
        echo "🧪 Running frontend tests..."
        if npm run | grep -q "test:unit"; then
          npm run test:unit
        elif npm run | grep -q "test"; then
          npm test
        else
          echo "⚠️ No tests configured, skipping"
        fi

    - name: Build frontend (test build)
      run: |
        cd frontend
        echo "🏗️ Testing frontend build..."
        npm run build

  # Security scan (always run for comprehensive security)
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --only-verified

  # Deploy backend only if needed (idempotent)
  deploy-backend:
    needs: [detect-changes, test-backend, security-scan]
    runs-on: ubuntu-latest
    if: always() && !failure() && (needs.detect-changes.outputs.backend_changed == 'true' || needs.detect-changes.outputs.deployment_strategy == 'full') && github.event_name != 'pull_request'
    environment: ${{ needs.detect-changes.outputs.environment }}
    
    outputs:
      api_url: ${{ steps.get-api-url.outputs.api_url }}
      stack_name: ${{ steps.deploy.outputs.stack_name }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_ACCESS_KEY_ID_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_ACCESS_KEY_ID_STAGING || secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_SECRET_ACCESS_KEY_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_SECRET_ACCESS_KEY_STAGING || secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cache SAM dependencies
      uses: actions/cache@v4
      with:
        path: |
          .aws-sam
          backend/.aws-sam
        key: ${{ runner.os }}-sam-${{ hashFiles('**/template.yaml', '**/samconfig.toml') }}
        restore-keys: |
          ${{ runner.os }}-sam-

    - name: Build SAM application
      run: |
        echo "🏗️ Building SAM application for ${{ needs.detect-changes.outputs.environment }}..."
        sam build --config-env ${{ needs.detect-changes.outputs.environment }}

    - name: Deploy with stable stack name
      id: deploy
      run: |
        ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
        STACK_NAME="themisguard-api-${ENVIRONMENT}"
        
        echo "🚀 Deploying backend to $ENVIRONMENT environment..."
        echo "📋 Stack name: $STACK_NAME (stable, no timestamps)"
        
        # Check current stack status
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
        echo "📊 Current stack status: $STACK_STATUS"
        
        # Deploy using stable stack name (idempotent)
        GOOGLE_CLIENT_ID="${{ needs.detect-changes.outputs.environment == 'dev' && secrets.GOOGLE_CLIENT_ID_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.GOOGLE_CLIENT_ID_STAGING || secrets.GOOGLE_CLIENT_ID_PROD }}"
        
        # Build parameter overrides - only include GoogleClientId if it's not empty
        PARAM_OVERRIDES="Environment=$ENVIRONMENT ProjectName=themisguard Version=${{ github.sha }} Branch=${{ github.ref_name }}"
        if [[ -n "$GOOGLE_CLIENT_ID" ]]; then
          PARAM_OVERRIDES="$PARAM_OVERRIDES GoogleClientId=$GOOGLE_CLIENT_ID"
        fi
        
        sam deploy \
          --config-env "$ENVIRONMENT" \
          --stack-name "$STACK_NAME" \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --parameter-overrides $PARAM_OVERRIDES
        
        echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT
        echo "✅ Backend deployment completed successfully"

    - name: Get API URL
      id: get-api-url
      run: |
        STACK_NAME="${{ steps.deploy.outputs.stack_name }}"
        
        # Wait a moment for stack outputs to be available
        sleep 10
        
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [[ -z "$API_URL" || "$API_URL" == "None" ]]; then
          echo "⚠️ Could not get API URL from stack, using default"
          API_URL="https://api-${{ needs.detect-changes.outputs.environment }}.example.com"
        fi
        
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "🔗 API URL: $API_URL"

    - name: Run API health check
      run: |
        API_URL="${{ steps.get-api-url.outputs.api_url }}"
        echo "🏥 Running API health check..."
        
        # Wait for API to be ready
        sleep 30
        
        # Try health check with retry
        for i in {1..3}; do
          if curl -f -s "$API_URL/health" > /dev/null 2>&1; then
            echo "✅ API health check passed"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying..."
            sleep 15
          fi
        done

  # Deploy frontend only if needed (idempotent)
  deploy-frontend:
    needs: [detect-changes, test-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always() && !failure() && needs.detect-changes.outputs.deployment_strategy == 'full' && github.event_name != 'pull_request'
    environment: ${{ needs.detect-changes.outputs.environment }}
    
    outputs:
      frontend_url: ${{ steps.deploy-frontend.outputs.frontend_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_ACCESS_KEY_ID_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_ACCESS_KEY_ID_STAGING || secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_SECRET_ACCESS_KEY_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_SECRET_ACCESS_KEY_STAGING || secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy frontend infrastructure (idempotent)
      run: |
        ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
        STACK_NAME="compliantguard-frontend-${ENVIRONMENT}"
        
        echo "🏗️ Ensuring frontend infrastructure exists..."
        echo "📋 Stack name: $STACK_NAME (stable, no timestamps)"
        
        # Check if stack exists
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
        echo "📊 Frontend infrastructure status: $STACK_STATUS"
        
        if [[ "$STACK_STATUS" == "DOES_NOT_EXIST" ]]; then
          echo "📦 Creating frontend infrastructure..."
          aws cloudformation create-stack \
            --stack-name "$STACK_NAME" \
            --template-body file://frontend-template.yaml \
            --parameters \
              ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
              ParameterKey=ProjectName,ParameterValue=compliantguard \
            --capabilities CAPABILITY_IAM \
            --tags \
              Key=Environment,Value="$ENVIRONMENT" \
              Key=Project,Value=CompliantGuard \
              Key=Component,Value=frontend \
              Key=Tier,Value="${{ needs.detect-changes.outputs.environment == 'prod' && 'production' || 'development' }}" \
              Key=Owner,Value=DevOps \
              Key=CostCenter,Value=Engineering \
              Key=ManagedBy,Value=GitHubActions
          
          echo "⏳ Waiting for infrastructure creation..."
          aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
          echo "✅ Frontend infrastructure created"
        elif [[ "$STACK_STATUS" =~ ^(CREATE_COMPLETE|UPDATE_COMPLETE)$ ]]; then
          echo "✅ Frontend infrastructure already exists and is ready"
        else
          echo "⚠️ Infrastructure in unexpected state: $STACK_STATUS"
          echo "🔄 Attempting to update infrastructure..."
          aws cloudformation update-stack \
            --stack-name "$STACK_NAME" \
            --template-body file://frontend-template.yaml \
            --parameters \
              ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
              ParameterKey=ProjectName,ParameterValue=compliantguard \
            --capabilities CAPABILITY_IAM 2>/dev/null || echo "No updates needed"
        fi

    - name: Install dependencies and build
      run: |
        cd frontend
        echo "📦 Installing frontend dependencies..."
        npm ci

    - name: Build frontend with API URL
      run: |
        cd frontend
        
        # Get API URL from backend deployment or use default
        API_URL="${{ needs.deploy-backend.outputs.api_url }}"
        if [[ -z "$API_URL" || "$API_URL" == "None" ]]; then
          # Try to get from existing stack
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name "themisguard-api-${{ needs.detect-changes.outputs.environment }}" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          if [[ -z "$API_URL" ]]; then
            API_URL="https://api-${{ needs.detect-changes.outputs.environment }}.example.com"
            echo "⚠️ Using fallback API URL: $API_URL"
          fi
        fi
        
        echo "🔗 Building with API URL: $API_URL"
        echo "VITE_API_URL=$API_URL" > .env.production
        echo "VITE_ENVIRONMENT=${{ needs.detect-changes.outputs.environment }}" >> .env.production
        echo "VITE_VERSION=${{ github.sha }}" >> .env.production
        
        echo "🏗️ Building frontend..."
        npm run build

    - name: Deploy frontend to S3
      id: deploy-frontend
      run: |
        cd frontend
        ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
        STACK_NAME="compliantguard-frontend-${ENVIRONMENT}"
        
        # Get S3 bucket from infrastructure stack
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [[ -z "$BUCKET_NAME" || "$BUCKET_NAME" == "None" ]]; then
          echo "❌ Could not get S3 bucket name from infrastructure stack"
          exit 1
        fi
        
        echo "📤 Deploying frontend to S3 bucket: $BUCKET_NAME"
        
        # Sync files with appropriate cache headers
        aws s3 sync dist/ "s3://$BUCKET_NAME/" --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "*.html" \
          --exclude "*.js.map"
        
        # Set no-cache for HTML files
        aws s3 sync dist/ "s3://$BUCKET_NAME/" \
          --cache-control "no-cache, no-store, must-revalidate" \
          --include "*.html" \
          --content-type "text/html"
        
        # Get frontend URL
        FRONTEND_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendURL`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "✅ Frontend deployed successfully"
        echo "🌐 Frontend URL: $FRONTEND_URL"

    - name: Invalidate CloudFront cache
      run: |
        ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
        STACK_NAME="compliantguard-frontend-${ENVIRONMENT}"
        
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [[ -n "$DISTRIBUTION_ID" && "$DISTRIBUTION_ID" != "None" ]]; then
          echo "🔄 Invalidating CloudFront cache..."
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          echo "✅ CloudFront invalidation started: $INVALIDATION_ID"
        else
          echo "⚠️ CloudFront distribution not found, skipping cache invalidation"
        fi

  # Deploy frontend only (when backend hasn't changed)
  deploy-frontend-only:
    needs: [detect-changes, test-frontend]
    runs-on: ubuntu-latest
    if: always() && !failure() && (needs.detect-changes.outputs.deployment_strategy == 'frontend-only' || (needs.detect-changes.outputs.frontend_changed == 'true' && needs.detect-changes.outputs.deployment_strategy != 'full')) && github.event_name != 'pull_request'
    environment: ${{ needs.detect-changes.outputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_ACCESS_KEY_ID_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_ACCESS_KEY_ID_STAGING || secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_SECRET_ACCESS_KEY_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_SECRET_ACCESS_KEY_STAGING || secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get existing API URL
      id: get-api-url
      run: |
        ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
        
        # Get API URL from existing backend stack
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "themisguard-api-${ENVIRONMENT}" \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [[ -z "$API_URL" || "$API_URL" == "None" ]]; then
          API_URL="https://api-${ENVIRONMENT}.example.com"
          echo "⚠️ Using fallback API URL: $API_URL"
        fi
        
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "🔗 Using existing API URL: $API_URL"

    - name: Build and deploy frontend
      run: |
        cd frontend
        
        echo "📦 Installing dependencies..."
        npm ci
        
        echo "🏗️ Building frontend..."
        echo "VITE_API_URL=${{ steps.get-api-url.outputs.api_url }}" > .env.production
        echo "VITE_ENVIRONMENT=${{ needs.detect-changes.outputs.environment }}" >> .env.production
        echo "VITE_VERSION=${{ github.sha }}" >> .env.production
        npm run build
        
        echo "📤 Deploying frontend..."
        ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
        STACK_NAME="compliantguard-frontend-${ENVIRONMENT}"
        
        # Get S3 bucket
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
          --output text)
        
        # Deploy to S3
        aws s3 sync dist/ "s3://$BUCKET_NAME/" --delete
        
        # Invalidate CloudFront
        DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [[ -n "$DISTRIBUTION_ID" && "$DISTRIBUTION_ID" != "None" ]]; then
          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*"
          echo "✅ Frontend deployed and cache invalidated"
        else
          echo "✅ Frontend deployed (no CloudFront cache to invalidate)"
        fi

  # Final smoke tests
  smoke-test:
    needs: [detect-changes, deploy-backend, deploy-frontend, deploy-frontend-only]
    runs-on: ubuntu-latest
    if: always() && !failure() && needs.detect-changes.outputs.deployment_strategy != 'none' && github.event_name != 'pull_request'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_ACCESS_KEY_ID_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_ACCESS_KEY_ID_STAGING || secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ needs.detect-changes.outputs.environment == 'dev' && secrets.AWS_SECRET_ACCESS_KEY_DEV || needs.detect-changes.outputs.environment == 'staging' && secrets.AWS_SECRET_ACCESS_KEY_STAGING || secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get deployment URLs
      id: get-urls
      run: |
        ENVIRONMENT="${{ needs.detect-changes.outputs.environment }}"
        
        # Get API URL
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "themisguard-api-${ENVIRONMENT}" \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        # Get Frontend URL  
        FRONTEND_URL=$(aws cloudformation describe-stacks \
          --stack-name "compliantguard-frontend-${ENVIRONMENT}" \
          --query 'Stacks[0].Outputs[?OutputKey==`FrontendURL`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      run: |
        API_URL="${{ steps.get-urls.outputs.api_url }}"
        FRONTEND_URL="${{ steps.get-urls.outputs.frontend_url }}"
        
        echo "🧪 Running smoke tests for ${{ needs.detect-changes.outputs.environment }} environment..."
        
        # Test API if it was deployed
        if [[ -n "$API_URL" && "$API_URL" != "None" ]]; then
          echo "🔍 Testing API health..."
          if curl -f -s "$API_URL/health" > /dev/null; then
            echo "✅ API health check passed"
          else
            echo "⚠️ API health check failed (may still be starting up)"
          fi
        fi
        
        # Test frontend if it was deployed
        if [[ -n "$FRONTEND_URL" && "$FRONTEND_URL" != "None" ]]; then
          echo "🔍 Testing frontend availability..."
          if curl -f -s -I "$FRONTEND_URL" > /dev/null; then
            echo "✅ Frontend availability check passed"
          else
            echo "⚠️ Frontend availability check failed (may still be propagating)"
          fi
        fi
        
        echo "🎉 Smoke tests completed"

  # Create deployment summary
  deployment-summary:
    needs: [detect-changes, deploy-backend, deploy-frontend, deploy-frontend-only, smoke-test]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Create deployment summary
      run: |
        echo "## 🚀 Smart Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Strategy:** ${{ needs.detect-changes.outputs.deployment_strategy }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Change Detection" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Changed:** ${{ needs.detect-changes.outputs.backend_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Changed:** ${{ needs.detect-changes.outputs.frontend_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Infrastructure Changed:** ${{ needs.detect-changes.outputs.infrastructure_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🎯 Deployment Results" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.detect-changes.outputs.deployment_strategy }}" == "none" ]]; then
          echo "✅ **No deployment needed** - Only documentation or non-deployment files changed" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Backend Deployment:** ${{ needs.deploy-backend.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Deployment:** ${{ needs.deploy-frontend.result || needs.deploy-frontend-only.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Smoke Tests:** ${{ needs.smoke-test.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 💰 Cost Optimization" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Stable resource names** (no timestamps)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Selective deployment** (only changed components)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Idempotent operations** (safe to re-run)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Proper resource tagging** for cost tracking" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Estimated Action Minutes Saved:** 5-10 minutes per deployment" >> $GITHUB_STEP_SUMMARY