AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ThemisGuard HIPAA Compliance API

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        AWS_REGION: !Ref AWS::Region
        DYNAMODB_TABLE_NAME: !Sub "${AWS::StackName}-scans"
        S3_BUCKET_NAME: !Sub "${AWS::StackName}-reports"
        JWT_SECRET_KEY: !Ref JWTSecretKey
        GCP_PROJECT_ID: !Ref GCPProjectId
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        GOOGLE_CLIENT_ID: !Ref GoogleClientId
        COGNITO_USER_POOL_ID: !Ref CognitoUserPool
        COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
        STRIPE_SECRET_KEY: !Ref StripeSecretKey
        STRIPE_PUBLISHABLE_KEY: !Ref StripePublishableKey
        STRIPE_WEBHOOK_SECRET: !Ref StripeWebhookSecret
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
  
  ProjectName:
    Type: String
    Default: themisguard
    Description: Project name for resource naming and tagging
  
  JWTSecretKey:
    Type: String
    Description: JWT Secret Key for authentication
    NoEcho: true
    Default: your-secret-key-change-in-production
  
  GCPProjectId:
    Type: String
    Description: GCP Project ID to monitor
    Default: ""
  
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID for SSO
    Default: ""
    NoEcho: true
  
  StripeSecretKey:
    Type: String
    Description: Stripe Secret Key for payment processing
    NoEcho: true
    Default: "sk_test_..."
  
  StripePublishableKey:
    Type: String
    Description: Stripe Publishable Key for frontend
    Default: "pk_test_..."
  
  StripeWebhookSecret:
    Type: String
    Description: Stripe Webhook Secret for event verification
    NoEcho: true
    Default: "whsec_..."
  
  CustomDomainName:
    Type: String
    Description: Custom domain name for API (optional)
    Default: ""
  
  SSLCertificateArn:
    Type: String
    Description: SSL Certificate ARN for custom domain (optional)
    Default: ""

Resources:
  # Lambda Function
  ThemisGuardAPI:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-api"
      CodeUri: backend/
      Handler: main.handler
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        RootApiGateway:
          Type: Api
          Properties:
            Path: /
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ScansTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AdminUsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AdminSessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AdminAuditTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AdminMetricsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsageTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InvoicesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WebhookEventsTable
        - S3CrudPolicy:
            BucketName: !Ref ReportsBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub "${ScansTable}/index/*"
                - !Sub "${UsersTable}/index/*"
                - !Sub "${AdminUsersTable}/index/*"
                - !Sub "${AdminSessionsTable}/index/*"
                - !Sub "${AdminAuditTable}/index/*"
                - !Sub "${SubscriptionsTable}/index/*"
                - !Sub "${UsageTable}/index/*"
                - !Sub "${InvoicesTable}/index/*"
                - !Sub "${WebhookEventsTable}/index/*"

  # DynamoDB Tables
  ScansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-scans"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: scan_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: scan_timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: scan_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: scan_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Admin DynamoDB Tables (segregated from customer data)
  AdminUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-admin-users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: admin_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: admin_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      DeletionProtectionEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  AdminSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-admin-sessions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: admin_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: admin-id-index
          KeySchema:
            - AttributeName: admin_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  AdminAuditTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-admin-audit"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: log_id
          AttributeType: S
        - AttributeName: admin_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: log_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: admin-id-index
          KeySchema:
            - AttributeName: admin_id
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      DeletionProtectionEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  AdminMetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-admin-metrics"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: metric_type
          AttributeType: S
      KeySchema:
        - AttributeName: metric_type
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Stripe/Billing DynamoDB Tables
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-subscriptions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: subscription_id
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
        - AttributeName: stripe_subscription_id
          AttributeType: S
      KeySchema:
        - AttributeName: subscription_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: customer-id-index
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: stripe-subscription-index
          KeySchema:
            - AttributeName: stripe_subscription_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      DeletionProtectionEnabled: !If [IsProduction, true, false]
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Owner
          Value: delatsi-llc
        - Key: DataClassification
          Value: sensitive

  UsageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-usage"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: usage_id
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
        - AttributeName: month_year
          AttributeType: S
      KeySchema:
        - AttributeName: usage_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: customer-month-index
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
            - AttributeName: month_year
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Owner
          Value: delatsi-llc
        - Key: DataClassification
          Value: billing

  InvoicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-invoices"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: invoice_id
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
        - AttributeName: stripe_invoice_id
          AttributeType: S
      KeySchema:
        - AttributeName: invoice_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: customer-id-index
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: stripe-invoice-index
          KeySchema:
            - AttributeName: stripe_invoice_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      DeletionProtectionEnabled: !If [IsProduction, true, false]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Owner
          Value: delatsi-llc
        - Key: DataClassification
          Value: financial

  WebhookEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-webhook-events"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
        - AttributeName: stripe_event_id
          AttributeType: S
        - AttributeName: event_type
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: stripe-event-index
          KeySchema:
            - AttributeName: stripe_event_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: event-type-index
          KeySchema:
            - AttributeName: event_type
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Owner
          Value: delatsi-llc
        - Key: DataClassification
          Value: operational

  # S3 Bucket for reports with enhanced security
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-reports-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReports
            Status: Enabled
            ExpirationInDays: !If [IsProduction, 2555, 365]  # 7 years for prod, 1 year for dev
            NoncurrentVersionExpirationInDays: 90
          - Id: IntelligentTiering
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Owner
          Value: delatsi-llc
        - Key: DataClassification
          Value: confidential
        - Key: BackupRequired
          Value: !If [IsProduction, "true", "false"]
    DeletionPolicy: !If [IsProduction, Retain, Delete]

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-users"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: custom:company
          AttributeDataType: String
          Required: false
          Mutable: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UserPoolTags:
        Environment: !Ref Environment
        Project: !Ref ProjectName
        Application: ThemisGuard
        Owner: delatsi-llc
        DataClassification: sensitive

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}-client"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      SupportedIdentityProviders: !If
        - HasGoogleSSO
        - [COGNITO, Google]
        - [COGNITO]
      CallbackURLs:
        - !Sub "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com/oauth2/idpresponse"
        - "http://localhost:5173/auth/callback"
      LogoutURLs:
        - !Sub "https://${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com/logout"
        - "http://localhost:5173/"
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH

  # Cognito Identity Provider (Google)
  CognitoIdentityProviderGoogle:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Condition: HasGoogleSSO
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: "{{resolve:secretsmanager:themisguard/google/client_secret:SecretString:client_secret}}"
        authorize_scopes: "email openid profile"
      AttributeMapping:
        email: email
        given_name: given_name
        family_name: family_name

  # Cognito User Pool Domain
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AWS::StackName}-auth"
      UserPoolId: !Ref CognitoUserPool

  # API Gateway Custom Domain (optional)
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomainName
      CertificateArn: !Ref SSLCertificateArn

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref CustomDomainName, ""]]
  IsProduction: !Equals [!Ref Environment, "prod"]
  HasGoogleSSO: !Not [!Equals [!Ref GoogleClientId, ""]]

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  ScansTableName:
    Description: DynamoDB table name for scans
    Value: !Ref ScansTable
    Export:
      Name: !Sub "${AWS::StackName}-ScansTable"
  
  UsersTableName:
    Description: DynamoDB table name for users
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${AWS::StackName}-UsersTable"
  
  ReportsBucketName:
    Description: S3 bucket name for reports
    Value: !Ref ReportsBucket
    Export:
      Name: !Sub "${AWS::StackName}-ReportsBucket"
  
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"
  
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"
  
  CognitoAuthDomain:
    Description: Cognito Auth Domain
    Value: !Sub "${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: !Sub "${AWS::StackName}-AuthDomain"